#############
# License
#############
#
# This file is part of Prompt-Theme.
#
# Promt-Theme is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Promt-Theme is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Promt-Theme.  If not, see <https://www.gnu.org/licenses/>.
#
#############
# References
#############
# - Chris Titus Tech
#   - https://raw.githubusercontent.com/ChrisTitusTech/scripts/master/fancy-bash-promt.sh
# - Andres Gongora
#   - https://github.com/andresgongora/bash-tools
# - WOLFMAN'S color bash prompt
#   - https://wiki.chakralinux.org/index.php?title=Color_Bash_Prompt#Wolfman.27s
# - https://gist.github.com/MicahElliott/719710
# - https://jonasjacek.github.io/colors/
#############


# Is this a git dir?
pt_get_git_dir(){
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
        echo "1"
    else
        echo "0"
    fi
}

# Just the branch text
pt_get_git_branch(){
    echo $(git rev-parse --abbrev-ref HEAD 2>/dev/null)
}

# Check or pencil depending on clean/changes
pt_get_git_clean(){
    local clean="clean"
    local changed="changed"
    if [ ! -z "$1" ]; then
        clean=$1
    fi
    if [ ! -z "$2" ]; then
        changed=$2
    fi

    # Check for git dir outside this function
    if [[ -z $(git status --porcelain -uall -s --ignore-submodules 2>/dev/null) ]]; then
        echo $clean
    else
        echo $changed
    fi
}


# Shorten the path if it gets too long
pt_bash_prompt_command() {
	# How many characters of the $PWD should be kept
	local pwdmaxlen=25

	# Indicate that there has been dir truncation
	local trunc_symbol=".."

    if [ ! -z "$1" ]; then
        pwdmaxlen=$1
    fi
    if [ ! -z "$2" ]; then
        trunc_symbol=$2
    fi

	# Store local dir
	local dir=${PWD##*/}

	# Which length to use
	pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))

	local PT_NEW_PWD=${PWD/#$HOME/\~}

	local pwdoffset=$(( ${#PT_NEW_PWD} - pwdmaxlen ))

	# Generate name
	if [ ${pwdoffset} -gt "0" ]
	then
		PT_NEW_PWD=${PT_NEW_PWD:$pwdoffset:$pwdmaxlen}
		PT_NEW_PWD=${trunc_symbol}/${PT_NEW_PWD#*/}
	fi
    echo $PT_NEW_PWD
}
